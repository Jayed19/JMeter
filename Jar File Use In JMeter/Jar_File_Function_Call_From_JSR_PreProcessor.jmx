<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Redme" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Step1: Create Public Class in Java without Main Function" elementType="Argument">
            <stringProp name="Argument.name">Step1: Create Public Class in Java without Main Function</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Step2: Create a Function public static String with return value" elementType="Argument">
            <stringProp name="Argument.name">Step2: Create a Function public static String with return value</stringProp>
            <stringProp name="Argument.value">package JMeter; import java.util.Random;  public class GenerateRandomEmail {       public static String getRandomEmail(int length){     String alphabet = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;     StringBuilder sb = new StringBuilder();     Random random = new Random();               for(int i = 0; i &lt; length; i++) {     int index = random.nextInt(alphabet.length());     char randomChar = alphabet.charAt(index);     sb.append(randomChar);     }          String randomString = sb.toString();     return randomString+&quot;@mail.com&quot;;            }             }</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Step3: Create a Jar file and copy to JMeter lib directory" elementType="Argument">
            <stringProp name="Argument.name">Step3: Create a Jar file and copy to JMeter lib directory</stringProp>
            <stringProp name="Argument.value">\apache-jmeter-5.5\lib\ext\</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Step4: Add PreProcessor JSR223 and call function here" elementType="Argument">
            <stringProp name="Argument.name">Step4: Add PreProcessor JSR223 and call function here</stringProp>
            <stringProp name="Argument.value">import JMeter.GenerateRandomEmail; GenerateRandomEmail GRE = new GenerateRandomEmail(); String Email=GRE.getRandomEmail(4); String NewEmail=&quot;&quot;; vars.put(&quot;NewEmail&quot;,Email); log.info(NewEmail);</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Step5: Observe the function return value in Debug Sampler" elementType="Argument">
            <stringProp name="Argument.name">Step5: Observe the function return value in Debug Sampler</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import JMeter.GenerateRandomEmail;
GenerateRandomEmail GRE = new GenerateRandomEmail();
String Email=GRE.getRandomEmail(4);
String NewEmail=&quot;&quot;;
vars.put(&quot;NewEmail&quot;,Email);
log.info(NewEmail);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import JMeter.GenerateRandomEmail;
GenerateRandomEmail GRE = new GenerateRandomEmail();
String Email=GRE.getRandomEmail(4);
String NewEmail=&quot;&quot;;
vars.put(&quot;NewEmail&quot;,Email);
log.info(NewEmail);</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
